{"ast":null,"code":"/*import React, { useState } from 'react';\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport axios from 'axios';\r\nimport './videoUpload.css';\r\n\r\nconst VideoUpload = () => {\r\n    const [inputField, setInputField] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        videoType: \"\"\r\n    });\r\n    const [videoFile, setVideoFile] = useState(null);\r\n    const [thumbnailFile, setThumbnailFile] = useState(null);\r\n\r\n    const handleOnChangeInput = (event, name) => { \r\n        setInputField({\r\n            ...inputField,\r\n            [name]: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleFileChange = (event, type) => {\r\n        const file = event.target.files[0];\r\n        if (type === \"video\") setVideoFile(file);\r\n        else if (type === \"thumbnail\") setThumbnailFile(file);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!videoFile || !thumbnailFile) {\r\n            console.log(\"Please select both a video and a thumbnail.\");\r\n            return;\r\n        }\r\n    \r\n        const formData = new FormData();\r\n        formData.append(\"title\", inputField.title);\r\n        formData.append(\"description\", inputField.description);\r\n        formData.append(\"videoType\", inputField.videoType);\r\n        formData.append(\"video\", videoFile);\r\n        formData.append(\"thumbnail\", thumbnailFile);\r\n    \r\n        try {\r\n            // Retrieve token from local storage\r\n            const token = localStorage.getItem(\"token\"); // or however your token is stored\r\n    \r\n            const response = await axios.post(\"http://localhost:4000/api/video\", formData, {\r\n                headers: { \r\n                    \"Content-Type\": \"multipart/form-data\",\r\n                    Authorization: `Bearer ${token}` // Attach token to Authorization header\r\n                }\r\n            });\r\n            console.log(\"Upload successful:\", response.data);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.error(\"Backend responded with an error:\", error.response.data);\r\n            } else if (error.request) {\r\n                console.error(\"Request made but no response received\", error.request);\r\n            } else {\r\n                console.error(\"Error in setting up request:\", error.message);\r\n            }\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className='videoUpload'>\r\n            <div className='uploadBox'>\r\n                <div className='uploadVideoTitle'>\r\n                    <YouTubeIcon sx={{ fontSize: \"54px\", color: \"red\" }} />\r\n                    Upload Video\r\n                </div>\r\n                <div className='uploadForm'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Title of video'\r\n                        onChange={(e) => handleOnChangeInput(e, \"title\")}\r\n                        value={inputField.title}\r\n                        className='uploadFormInput'\r\n                    />\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Description'\r\n                        onChange={(e) => handleOnChangeInput(e, \"description\")}\r\n                        value={inputField.description}\r\n                        className='uploadFormInput'\r\n                    />\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Category'\r\n                        onChange={(e) => handleOnChangeInput(e, \"videoType\")}\r\n                        value={inputField.videoType}\r\n                        className='uploadFormInput'\r\n                    />\r\n                    <div>\r\n                        Thumbnail\r\n                        <input\r\n                            type='file'\r\n                            accept='image/*'\r\n                            onChange={(e) => handleFileChange(e, \"thumbnail\")}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Video\r\n                        <input\r\n                            type='file'\r\n                            accept='video/mp4, video/webm, video/*'\r\n                            onChange={(e) => handleFileChange(e, \"video\")}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='uploadBtn'>\r\n                    <div className='uploadBtn_form' onClick={handleSubmit}>Upload</div>\r\n                    <div className='uploadBtn_form'>Home</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoUpload; */","map":{"version":3,"names":[],"sources":["C:/BackendFile/youtube/frontend/src/Pages/VideoUpload/videoUpload.js"],"sourcesContent":["/*import React, { useState } from 'react';\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport axios from 'axios';\r\nimport './videoUpload.css';\r\n\r\nconst VideoUpload = () => {\r\n    const [inputField, setInputField] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        videoType: \"\"\r\n    });\r\n    const [videoFile, setVideoFile] = useState(null);\r\n    const [thumbnailFile, setThumbnailFile] = useState(null);\r\n\r\n    const handleOnChangeInput = (event, name) => { \r\n        setInputField({\r\n            ...inputField,\r\n            [name]: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleFileChange = (event, type) => {\r\n        const file = event.target.files[0];\r\n        if (type === \"video\") setVideoFile(file);\r\n        else if (type === \"thumbnail\") setThumbnailFile(file);\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!videoFile || !thumbnailFile) {\r\n            console.log(\"Please select both a video and a thumbnail.\");\r\n            return;\r\n        }\r\n    \r\n        const formData = new FormData();\r\n        formData.append(\"title\", inputField.title);\r\n        formData.append(\"description\", inputField.description);\r\n        formData.append(\"videoType\", inputField.videoType);\r\n        formData.append(\"video\", videoFile);\r\n        formData.append(\"thumbnail\", thumbnailFile);\r\n    \r\n        try {\r\n            // Retrieve token from local storage\r\n            const token = localStorage.getItem(\"token\"); // or however your token is stored\r\n    \r\n            const response = await axios.post(\"http://localhost:4000/api/video\", formData, {\r\n                headers: { \r\n                    \"Content-Type\": \"multipart/form-data\",\r\n                    Authorization: `Bearer ${token}` // Attach token to Authorization header\r\n                }\r\n            });\r\n            console.log(\"Upload successful:\", response.data);\r\n        } catch (error) {\r\n            if (error.response) {\r\n                console.error(\"Backend responded with an error:\", error.response.data);\r\n            } else if (error.request) {\r\n                console.error(\"Request made but no response received\", error.request);\r\n            } else {\r\n                console.error(\"Error in setting up request:\", error.message);\r\n            }\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <div className='videoUpload'>\r\n            <div className='uploadBox'>\r\n                <div className='uploadVideoTitle'>\r\n                    <YouTubeIcon sx={{ fontSize: \"54px\", color: \"red\" }} />\r\n                    Upload Video\r\n                </div>\r\n                <div className='uploadForm'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Title of video'\r\n                        onChange={(e) => handleOnChangeInput(e, \"title\")}\r\n                        value={inputField.title}\r\n                        className='uploadFormInput'\r\n                    />\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Description'\r\n                        onChange={(e) => handleOnChangeInput(e, \"description\")}\r\n                        value={inputField.description}\r\n                        className='uploadFormInput'\r\n                    />\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Category'\r\n                        onChange={(e) => handleOnChangeInput(e, \"videoType\")}\r\n                        value={inputField.videoType}\r\n                        className='uploadFormInput'\r\n                    />\r\n                    <div>\r\n                        Thumbnail\r\n                        <input\r\n                            type='file'\r\n                            accept='image/*'\r\n                            onChange={(e) => handleFileChange(e, \"thumbnail\")}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        Video\r\n                        <input\r\n                            type='file'\r\n                            accept='video/mp4, video/webm, video/*'\r\n                            onChange={(e) => handleFileChange(e, \"video\")}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className='uploadBtn'>\r\n                    <div className='uploadBtn_form' onClick={handleSubmit}>Upload</div>\r\n                    <div className='uploadBtn_form'>Home</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoUpload; */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}