{"ast":null,"code":"var _jsxFileName = \"C:\\\\BackendFile\\\\youtube\\\\frontend\\\\src\\\\components\\\\Voice\\\\SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const [sentences, setSentences] = useState([]);\n  const [listeningDuration, setListeningDuration] = useState(10); // duration for auto stop in seconds\n  const {\n    transcript,\n    listening,\n    resetTranscript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  useEffect(() => {\n    console.log(\"Transcript Updated:\", transcript); // Log transcript data\n    if (transcript) {\n      setSentences(prevSentences => [...prevSentences, transcript]); // Add new transcript to sentences\n    }\n  }, [transcript]);\n\n  // Stop listening function after a duration\n  const startListening = () => {\n    if (browserSupportsSpeechRecognition) {\n      SpeechRecognition.startListening({\n        continuous: true,\n        language: 'en-US'\n      });\n      console.log(\"Started listening...\");\n      setTimeout(() => {\n        stopListening(); // Automatically stop after listeningDuration\n      }, listeningDuration * 1000); // Convert to milliseconds\n    } else {\n      console.log(\"Browser does not support speech recognition.\");\n    }\n  };\n\n  // Stop listening function\n  const stopListening = () => {\n    SpeechRecognition.stopListening();\n    console.log(\"Stopped listening...\");\n  };\n\n  // Reset function\n  const resetAll = () => {\n    resetTranscript();\n    setSentences([]);\n    console.log(\"Reset all data...\");\n  };\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '50px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Browser Not Supported\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your browser does not support speech recognition. Please try a different browser.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Voice Recognition with Real-Time Sentence Display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Click on the mic, speak, and your sentences will appear below in real-time:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startListening,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"\\uD83C\\uDFA4 Start Listening\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), listening && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: '20px',\n            padding: '10px',\n            border: '1px solid #ccc',\n            borderRadius: '5px',\n            width: '50%',\n            margin: '20px auto',\n            background: '#f9f9f9'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Listening:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), \" \", listening ? \"Yes\" : \"No\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px',\n        fontSize: '18px',\n        color: '#333'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Current Transcript:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: transcript || \"Start speaking to see your speech here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '30px',\n        padding: '10px',\n        border: '1px solid #ccc',\n        borderRadius: '5px',\n        width: '60%',\n        margin: '20px auto',\n        background: '#e8f4fa'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Real-Time Spoken Sentences:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: sentences.join(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"UsALfmmWVmgwVtUkjXm2EjVDaVg=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchBar","_s","sentences","setSentences","listeningDuration","setListeningDuration","transcript","listening","resetTranscript","browserSupportsSpeechRecognition","console","log","prevSentences","startListening","continuous","language","setTimeout","stopListening","resetAll","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","marginRight","padding","border","borderRadius","width","margin","background","fontSize","color","join","_c","$RefreshReg$"],"sources":["C:/BackendFile/youtube/frontend/src/components/Voice/SearchBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\r\n\r\nconst SearchBar = () => {\r\n  const [sentences, setSentences] = useState([]);\r\n  const [listeningDuration, setListeningDuration] = useState(10); // duration for auto stop in seconds\r\n  const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } = useSpeechRecognition();\r\n\r\n  useEffect(() => {\r\n    console.log(\"Transcript Updated:\", transcript); // Log transcript data\r\n    if (transcript) {\r\n      setSentences((prevSentences) => [...prevSentences, transcript]); // Add new transcript to sentences\r\n    }\r\n  }, [transcript]);\r\n\r\n  // Stop listening function after a duration\r\n  const startListening = () => {\r\n    if (browserSupportsSpeechRecognition) {\r\n      SpeechRecognition.startListening({ continuous: true, language: 'en-US' });\r\n      console.log(\"Started listening...\");\r\n      setTimeout(() => {\r\n        stopListening(); // Automatically stop after listeningDuration\r\n      }, listeningDuration * 1000); // Convert to milliseconds\r\n    } else {\r\n      console.log(\"Browser does not support speech recognition.\");\r\n    }\r\n  };\r\n\r\n  // Stop listening function\r\n  const stopListening = () => {\r\n    SpeechRecognition.stopListening();\r\n    console.log(\"Stopped listening...\");\r\n  };\r\n\r\n  // Reset function\r\n  const resetAll = () => {\r\n    resetTranscript();\r\n    setSentences([]);\r\n    console.log(\"Reset all data...\");\r\n  };\r\n\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return (\r\n      <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n        <h2>Browser Not Supported</h2>\r\n        <p>Your browser does not support speech recognition. Please try a different browser.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\r\n      <h2>Voice Recognition with Real-Time Sentence Display</h2>\r\n      <p>Click on the mic, speak, and your sentences will appear below in real-time:</p>\r\n      <div>\r\n        <button onClick={startListening} style={{ marginRight: '10px' }}>ðŸŽ¤ Start Listening</button>\r\n        {listening && (\r\n          <>\r\n            {/* Show this section only when listening is active */}\r\n            <div style={{ marginTop: '20px', padding: '10px', border: '1px solid #ccc', borderRadius: '5px', width: '50%', margin: '20px auto', background: '#f9f9f9' }}>\r\n              <strong>Listening:</strong> {listening ? \"Yes\" : \"No\"}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      <div style={{ marginTop: '20px', fontSize: '18px', color: '#333' }}>\r\n        <strong>Current Transcript:</strong>\r\n        <p>{transcript || \"Start speaking to see your speech here...\"}</p>\r\n      </div>\r\n      <div style={{ marginTop: '30px', padding: '10px', border: '1px solid #ccc', borderRadius: '5px', width: '60%', margin: '20px auto', background: '#e8f4fa' }}>\r\n        <h3>Real-Time Spoken Sentences:</h3>\r\n        <p>{sentences.join(' ')}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}